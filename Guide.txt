Helper:

helper.load(doImageCropping) - must be called in the first line of the load function in main
		doImageCropping - boolean value, false if image hitboxes shouldn't be automaticaly cropped to exactly fit the image

helper.newObject(type,x,y,width,height,image,rotation) - adds a new object to the object array
		type - can be 'rectangle'(a filled rectangle) or 'image'(the image specified)
		x,y - the coordinates of the new object
		width, height - the dimensions of the object, with an image object, these are altered to fit with the height to width ratios of the image
		image - for image type objects, must have canvas size touching all 4 sides of the object
		rotation - rotation in degrees

helper.movement(objectID,mode,x,y,speed) - either moves or adds acceleration to an existing object
		objectID - specifies which object to apply this to
		mode - either 'move'(instantly changes the position of the object by that amount) or 'accelerate'(moves object by a certain amount each frame) or 'rotationalVelocity' which uses the speed value as the direction and speed of rotation
		x,y - in 'accelerate' mode the ratio of x to y is the angle of movement and can be from (-1,-1)to(1,1)
		speed - only for accelerate

helper.track(objectID) - displays the array for that object
		objectID - specifies which object to track

helper.rotate(objectID,degrees) - rotates an object by an amount of degrees(this makes hitboxes no longer accurate)(only with image type objects)
		degrees - the amount of degrees (0-360) of rotation

helper.get(objectID) - returns an array of all that object's variables USAGE : love.graphics.print(helper.get(1)[2],100,1) - prints object one's x position at 100,1

helper.checkCollision(objectID,objectID) - returns true if the two objects are touching
		objectID - the object IDs of the two objects you want to compare